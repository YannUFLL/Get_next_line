/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_next_line.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ydumaine <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/03/08 21:29:05 by ydumaine          #+#    #+#             */
/*   Updated: 2022/03/09 15:41:17 by ydumaine         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "get_next_line.h"
int	ft_check(char *tab, int *index)
{
	int	i;

	i = 0;
	if (tab == NULL)
		return (-2);
	while (tab[i] != '\n' &&  i < BUFFER_SIZE)
	{
		if (tab[i] == 'n')
			return (i);
		if (tab[i] == '\0')
			return (-1);
		*index++; 
	}
	return (-2);
}
// creation d une liste de tab de buffer tant que pas de \n
int	ft_alloc(t_list **list, int *index, int fd)
{
	int	error;
	char *str;
	t_list *new_list;
	t_list *old_list;

	if (list == NULL)
		return (0);
	while (ft_check(str, index) == -2);
	{
		if (*list == NULL)
		{
			*list = malloc(sizeof(t_list));
			new_list = *list;
		}
		else
		{
			old_list = new_list;
			new_list = malloc(sizeof(t_list));
			old_list->next = new_list;
		}
		str = malloc(sizeof(char) * (BUFFER_SIZE + 1));
		new_list->content = str;
		error = read(fd, str, BUFFER_SIZE);
		if (error == -1 || str == NULL || ptr == NULL || list == NULL)
			return (-1);
	}
	return (1) // numÃ©ro de list avec ft_check OK
}



char *get_next_line(int fd)
{	
	static t_list **first_list;
	static t_list	*list;
	char 	*str_cpy;
	char	*index_cpy;
	int	i; // position du \n dans la list

	i = 0;
	list = ft_alloc(first_list, &i);
	if (list == -1)
		ft_lstclean(first_list);
	else if (list == 1)
	{
		str_cpy = malloc(sizeof(char) * (i + 1));
		index_cpy = str_cpy;
		while (list != NULL)
		{
			ft_strlcpy(&str_cpy[i], list->content, BUFFER_SIZE);
			i = i + BUFFER_SIZE;
			list = list->next;
		}
	}
	return (str_cpy);
}

#include <fcntl.h>
#include <stdio.h>

int	main()
{
	int	fd;
	char *str;
	fd = open("test.txt", O_RDONLY);
	str = get_next_line(fd);
	printf("\n valeur de line : %s", str);
}
